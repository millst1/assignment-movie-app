{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thoma\\\\Documents\\\\Repositories\\\\assignment-movie-app\\\\src\\\\components\\\\MovieSearch.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport SearchBar from './SearchBar';\nimport GridCardFactory from './GridCardFactory';\nimport Spinner from './Spinner';\nimport Alert from './Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MovieSearch() {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [movieList, setMovieList] = useState([]);\n  const [failedQuery, setFailedQuery] = useState(\"\");\n  const queryMovieAPI = async searchQuery => {\n    setLoading(true);\n    setErrorMessage(\"\");\n    setFailedQuery(\"\");\n    const API_KEY = process.env.REACT_APP_MOVIE_API_KEY;\n    if (searchQuery === \"\") {\n      setLoading(false);\n    } else {\n      try {\n        const response = await axios.get(`https://www.omdbapi.com/?apikey=${API_KEY}&s=${searchQuery}`);\n        console.log(response.data);\n        if (response.data.Response === \"True\") {\n          console.log(\"Request Success\");\n          setMovieList(response.data.Search);\n          console.log(movieList);\n        } else {\n          setErrorMessage(response.data.Error);\n          setFailedQuery(searchQuery);\n          console.log(\"response.data.response !== True. See error message: \", errorMessage);\n        }\n      } catch (error) {\n        setErrorMessage(error);\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: queryMovieAPI\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }, this), errorMessage != \"\" && /*#__PURE__*/_jsxDEV(Alert, {\n      failedQuery: failedQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(GridCardFactory, {\n      movies: movieList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(MovieSearch, \"M1NAwJ+O9MMnlLIDhBCf+eC50nM=\");\n_c = MovieSearch;\nexport default MovieSearch;\nvar _c;\n$RefreshReg$(_c, \"MovieSearch\");","map":{"version":3,"names":["React","useState","axios","SearchBar","GridCardFactory","Spinner","Alert","jsxDEV","_jsxDEV","MovieSearch","_s","loading","setLoading","errorMessage","setErrorMessage","movieList","setMovieList","failedQuery","setFailedQuery","queryMovieAPI","searchQuery","API_KEY","process","env","REACT_APP_MOVIE_API_KEY","response","get","console","log","data","Response","Search","Error","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","movies","_c","$RefreshReg$"],"sources":["C:/Users/thoma/Documents/Repositories/assignment-movie-app/src/components/MovieSearch.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport SearchBar from './SearchBar';\r\nimport GridCardFactory from './GridCardFactory';\r\nimport Spinner from './Spinner';\r\nimport Alert from './Alert';\r\n\r\nfunction MovieSearch() {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [movieList, setMovieList] = useState([]);\r\n    const [failedQuery, setFailedQuery] = useState(\"\"); \r\n\r\n    const queryMovieAPI = async(searchQuery) => {\r\n        setLoading(true);\r\n        setErrorMessage(\"\");\r\n        setFailedQuery(\"\");\r\n\r\n        const API_KEY=process.env.REACT_APP_MOVIE_API_KEY;\r\n\r\n        if (searchQuery === \"\") {\r\n            setLoading(false);\r\n        } else {\r\n            try {\r\n                const response = await axios.get(`https://www.omdbapi.com/?apikey=${API_KEY}&s=${searchQuery}`);\r\n                console.log(response.data);\r\n\r\n                if (response.data.Response === \"True\") {\r\n                    console.log(\"Request Success\");\r\n                    setMovieList(response.data.Search);\r\n                    console.log(movieList)\r\n                } else {\r\n                    setErrorMessage(response.data.Error);\r\n                    setFailedQuery(searchQuery);\r\n                    console.log(\"response.data.response !== True. See error message: \",errorMessage);\r\n                }\r\n\r\n            } catch (error) {\r\n                setErrorMessage(error);\r\n                console.log(error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n    } \r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1></h1>\r\n            <SearchBar onSearch={queryMovieAPI}/>\r\n\r\n            {loading && <Spinner/>}\r\n            {errorMessage != \"\" && <Alert failedQuery={failedQuery} />}\r\n\r\n            <GridCardFactory movies={movieList} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieSearch;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}